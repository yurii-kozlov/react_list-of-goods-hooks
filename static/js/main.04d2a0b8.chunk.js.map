{"version":3,"sources":["App.tsx","GoodsList.tsx","index.tsx"],"names":["SortType","GoodsList","goods","map","good","goodsFromServer","App","useState","isReversed","setIsReversed","NONE","sortType","setSortType","preparedGoods","visibleGoods","sort","good1","good2","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","onClick","current","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0DCZQC,EAA6B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC3C,OACE,6BACGA,EAAMC,KAAI,SAACC,GAAD,OACT,oBAAe,UAAQ,OAAvB,SACGA,GADMA,SDLJC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGL,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAuCE,IAAMM,EAAgB,WAC3B,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASP,EAASU,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EA/BD,SACLX,EADK,GAGJ,IADCS,EACF,EADEA,SAAUH,EACZ,EADYA,WAGNM,EAAY,YAAOZ,GAmBzB,OAjBAY,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQN,GACN,KAAKX,EAASkB,SACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKjB,EAASoB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAITb,GACFM,EAAaQ,UAGRR,EAOeS,CACpBlB,EAAiB,CAAEG,aAAYG,aAYjC,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWb,IAAaX,EAASkB,SAC7B,iBACA,0BACJQ,QAAS,kBAAMd,EAAYZ,EAASkB,WALtC,iCAUA,wBACEO,KAAK,SACLD,UAAWb,IAAaX,EAASoB,OAC7B,oBACA,6BACJM,QAAS,kBAAMd,EAAYZ,EAASoB,SALtC,4BAUA,wBACEK,KAAK,SACLD,UAAWhB,EACP,oBACA,6BACJkB,QArCQ,WACdjB,GAAc,SAACkB,GAAD,OAAcA,MA+BxB,qBAUCnB,GAAcG,IAAaX,EAASU,KACnC,wBACEe,KAAK,SACLD,UAAU,4BACVE,QA1CiB,WACzBd,EAAYZ,EAASU,MACrBD,GAAc,IAqCR,mBAOE,MAGN,cAAC,EAAD,CAAWP,MAAOW,QEnHxBe,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.04d2a0b8.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport { GoodsList } from './GoodsList';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\n// Use this function in the render to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((good1, good2) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return good1.localeCompare(good2);\n\n      case SortType.LENGTH:\n        return good1.length - good2.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const preparedGoods = getReorderedGoods(\n    goodsFromServer, { isReversed, sortType },\n  );\n\n  const reverse = () => {\n    setIsReversed((current) => !current);\n  };\n\n  const sortInInitialOrder = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={sortType === SortType.ALPHABET\n            ? 'button is-info'\n            : 'button is-info is-light'}\n          onClick={() => setSortType(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={sortType === SortType.LENGTH\n            ? 'button is-success'\n            : 'button is-success is-light'}\n          onClick={() => setSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={isReversed\n            ? 'button is-warning'\n            : 'button is-warning is-light'}\n          onClick={reverse}\n        >\n          Reverse\n        </button>\n\n        {isReversed || sortType !== SortType.NONE ? (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={sortInInitialOrder}\n          >\n            Reset\n          </button>\n        ) : ''}\n      </div>\n\n      <GoodsList goods={preparedGoods} />\n    </div>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  goods: string[]\n};\n\nexport const GoodsList: React.FC<Props> = ({ goods }) => {\n  return (\n    <ul>\n      {goods.map((good) => (\n        <li key={good} data-cy=\"Good\">\n          {good}\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}